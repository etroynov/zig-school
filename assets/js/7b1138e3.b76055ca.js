"use strict";(self.webpackChunkzig_school=self.webpackChunkzig_school||[]).push([[662],{3955:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=i(5893),s=i(1151);const o={title:"Loops (While, For)",slug:"/for-while-loops",sidebar_position:4},r="While",a={id:"basics/loops",title:"Loops (While, For)",description:"The loop has three parts - a condition, a block and a continue expression.",source:"@site/docs/basics/loops.mdx",sourceDirName:"basics",slug:"/for-while-loops",permalink:"/zig-school/docs/for-while-loops",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/loops.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Loops (While, For)",slug:"/for-while-loops",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/zig-school/docs/basics/arrays"}},c={},d=[{value:"Basic",id:"basic",level:2},{value:"With a continue expression",id:"with-a-continue-expression",level:2},{value:"With a <code>continue</code>",id:"with-a-continue",level:2},{value:"With a <code>break</code>",id:"with-a-break",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"while",children:"While"}),"\n",(0,t.jsx)(n.p,{children:"The loop has three parts - a condition, a block and a continue expression."}),"\n",(0,t.jsx)(n.h2,{id:"basic",children:"Basic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'const std = @import("std");\n\npub fn main() !void {\n  const stdout = std.io.getStdOut().writer();\n  var i: i16 = 0;\n\n  while(i < 10) {\n    i += 1;\n    try stdout.print("{}\\n", .{i});\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"with-a-continue-expression",children:"With a continue expression"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'const std = @import("std");\n\npub fn main() !void {\n  const stdout = std.io.getStdOut().writer();\n  var i: i16 = 0;\n\n  while(i < 10): (i += 1) {\n    try stdout.print("{}\\n", .{i});\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note: continue expression will be executed before check"}),"\n",(0,t.jsxs)(n.h2,{id:"with-a-continue",children:["With a ",(0,t.jsx)(n.code,{children:"continue"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'const std = @import("std");\n\npub fn main() !void {\n  const stdout = std.io.getStdOut().writer();\n  var i: i16 = 0;\n\n  while(i < 10): (i += 1) {\n    if (@mod(i, 2) == 0) continue;\n    try stdout.print("{}\\n", .{i});\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"with-a-break",children:["With a ",(0,t.jsx)(n.code,{children:"break"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'const std = @import("std");\n\npub fn main() !void {\n  const stdout = std.io.getStdOut().writer();\n  var i: i16 = 0;\n\n  while(i < 10): (i += 1) {\n    if (i > 5) break;\n    try stdout.print("{}\\n", .{i});\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h1,{id:"for",children:"For"}),"\n",(0,t.jsx)(n.p,{children:"For loops are used to iterate over arrays (and other types, to be discussed later). For loops follow this syntax. Like while, for loops can use break and continue. Here, we\u2019ve had to assign values to _, as Zig does not allow us to have unused values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"//character literals are equivalent to integer literals\nconst string = [_]u8{ 'a', 'b', 'c' };\n\nfor (string, 0..) |character, index| {\n  _ = character;\n  _ = index;\n}\n\nfor (string) |character| {\n  _ = character;\n}\n\nfor (string, 0..) |_, index| {\n  _ = index;\n}\n\nfor (string) |_| {}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{a:()=>r});var t=i(7294);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);