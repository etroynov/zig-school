"use strict";(self.webpackChunkzig_school=self.webpackChunkzig_school||[]).push([[734],{5681:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>a,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var t=n(5893),r=n(1151);const d={title:"Data types",sidebar_position:2},s=void 0,c={id:"basics/data-types",title:"Data types",description:"Primitive Types",source:"@site/docs/basics/data-types.mdx",sourceDirName:"basics",slug:"/basics/data-types",permalink:"/zig-school/docs/basics/data-types",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/data-types.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Data types",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Variables",permalink:"/zig-school/docs/basics/variables"},next:{title:"Conditional Statements (if, else)",permalink:"/zig-school/docs/basics/conditional_statments"}},l={},h=[{value:"Primitive Types",id:"primitive-types",level:2},{value:"Integers",id:"integers",level:3},{value:"Floats",id:"floats",level:3},{value:"Boolean",id:"boolean",level:3},{value:"Other",id:"other",level:3}];function o(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"primitive-types",children:"Primitive Types"}),"\n",(0,t.jsx)(i.h3,{id:"integers",children:"Integers"}),"\n",(0,t.jsxs)(i.p,{children:["The requirement to express numeric values with limited resources drove the creation of signed vs. unsigned numbers. When utilizing 8 bits, there are only 256 possible combinations. Any value between 0 and 255 is considered an ",(0,t.jsx)(i.strong,{children:"unsigned"})," number. On the other hand, having a ",(0,t.jsx)(i.strong,{children:"signed"})," number means you've already lost a bit for representing the sign. With 7 bits, you can only have 128 permutations. Hence an 8-bit signed number's range is -128 to 127. Using unsigned numbers was the way to go if you had limited resources, which was the case in the early days of computers."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Unsigned integers range from ",(0,t.jsx)(i.code,{children:"0"})," to ",(0,t.jsx)(i.code,{children:"4,294,967,295"})," or around 4 billion in 32-bit integers."]}),"\n",(0,t.jsxs)(i.li,{children:["The signed version ranges from ",(0,t.jsx)(i.code,{children:"\u20132,147,483,648"})," to ",(0,t.jsx)(i.code,{children:"2,147,483,647"}),", or around -2 billion to +2 billion. The range is the same, but the values are shifted on the number line."]}),"\n"]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{scope:"col",children:"Type"}),(0,t.jsx)("th",{scope:"col",width:"30%",children:"C Equivalent"}),(0,t.jsx)("th",{scope:"col",children:"Description"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsx)("tr",{children:(0,t.jsx)("th",{align:"center",colSpan:3,children:"Signed"})}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"i8"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"int8_t"})}),(0,t.jsx)("td",{width:"100%",children:"8-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"i16"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"int16_t"})}),(0,t.jsx)("td",{width:"100%",children:"16-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"i32"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"int32_t"})}),(0,t.jsx)("td",{width:"100%",children:"32-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"i64"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"int64_t"})}),(0,t.jsx)("td",{width:"100%",children:"64-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"i128"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"int128_t"})}),(0,t.jsx)("td",{width:"100%",children:"128-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"isize"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"intptr_t"})}),(0,t.jsx)("td",{width:"100%",children:"signed pointer sized integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_char"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"char"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_short"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"short"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_int"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"int"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_long"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"long"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_longlong"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"long long"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_longdouble"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"long double"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsx)("tr",{children:(0,t.jsx)("th",{align:"center",colSpan:3,children:"Unsigned"})}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"u8"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"uint8_t"})}),(0,t.jsx)("td",{width:"100%",children:"8-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"u16"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"uint16_t"})}),(0,t.jsx)("td",{width:"100%",children:"16-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"u32"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unt32_t"})}),(0,t.jsx)("td",{width:"100%",children:"32-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"u64"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unt64_t"})}),(0,t.jsx)("td",{width:"100%",children:"64-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"u128"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unt128_t"})}),(0,t.jsx)("td",{width:"100%",children:"128-bit integer"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"usize"})}),(0,t.jsxs)("td",{align:"center",children:[(0,t.jsx)(i.code,{children:"uintptr_t"}),", ",(0,t.jsx)(i.code,{children:"size_t"})]}),(0,t.jsxs)("td",{width:"100%",children:["unsigned pointer sized integer. Also see ",(0,t.jsx)(i.a,{href:"https://github.com/ziglang/zig/issues/5185",children:"#5185"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_uchar"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unsigned char"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_ushort"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unsigned short"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_uint"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unsigned int"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_ulong"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unsigned long"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_ulonglong"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"unsigned long long"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"c_longdouble"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"long double"})}),(0,t.jsx)("td",{width:"100%",children:"for ABI compatibility with C"})]})]})]}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsx)(i.p,{children:"In addition to the integer types above, arbitrary bit-width integers can be referenced by using an identifier of i or u followed by digits. For example, the identifier i7 refers to a signed 7-bit integer. The maximum allowed bit-width of an integer type is 65535."})}),"\n",(0,t.jsx)(i.h3,{id:"floats",children:"Floats"}),"\n",(0,t.jsx)(i.p,{children:'"float" is a data type used to represent floating-point numbers. Floating-point numbers are used to represent real numbers, including both rational and irrational numbers, with a certain degree of precision.'}),"\n",(0,t.jsx)(i.p,{children:"Here are some key characteristics of float numbers:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Precision: Floats have limited precision, which means they can represent a finite number of decimal places accurately. The precision of a float is typically around 6-9 significant decimal digits."}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Range: Floats can represent a wide range of values, both large and small, with an exponent ranging from -38 to 38 (approximately). However, as the magnitude of the number increases or decreases, the precision decreases."}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Representation: Floats are typically represented in scientific notation, consisting of a sign bit, a mantissa (also known as the significand or fraction), and an exponent. This representation allows for a wide dynamic range."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{scope:"col",children:"Type"}),(0,t.jsx)("th",{scope:"col",width:"30%",children:"C Equivalent"}),(0,t.jsx)("th",{scope:"col",children:"Description"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"f16"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"_Float16"})}),(0,t.jsx)("td",{width:"100%",children:"16-bit floating point (10-bit mantissa) IEEE-754-2008 binary16"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"f32"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"float"})}),(0,t.jsx)("td",{width:"100%",children:"32-bit floating point (23-bit mantissa) IEEE-754-2008 binary32"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"f64"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"double"})}),(0,t.jsx)("td",{width:"100%",children:"64-bit floating point (52-bit mantissa) IEEE-754-2008 binary64"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"f80"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"double"})}),(0,t.jsx)("td",{width:"100%",children:"80-bit floating point (64-bit mantissa) IEEE-754-2008 80-bit extended precision"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"f128"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"_Float128"})}),(0,t.jsx)("td",{width:"100%",children:"128-bit floating point (112-bit mantissa) IEEE-754-2008 binary128"})]})]})]}),"\n",(0,t.jsx)(i.h3,{id:"boolean",children:"Boolean"}),"\n",(0,t.jsx)(i.p,{children:"The Boolean data type is a fundamental concept in programming languages. It represents one of the simplest forms of data: truth values."}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{scope:"col",children:"Type"}),(0,t.jsx)("th",{scope:"col",width:"30%",children:"C Equivalent"}),(0,t.jsx)("th",{scope:"col",children:"Description"})]})}),(0,t.jsx)("tbody",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"bool"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"bool"})}),(0,t.jsxs)("td",{width:"100%",children:["it can be ",(0,t.jsx)(i.code,{children:"true"})," or ",(0,t.jsx)(i.code,{children:"false"})]})]})})]}),"\n",(0,t.jsx)(i.h3,{id:"other",children:"Other"}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{scope:"col",children:"Type"}),(0,t.jsx)("th",{scope:"col",width:"30%",children:"C Equivalent"}),(0,t.jsx)("th",{scope:"col",children:"Description"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"anyopaque"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"void"})}),(0,t.jsx)("td",{width:"100%",children:"Used for type-erased pointers"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"void"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"-"})}),(0,t.jsx)("td",{width:"100%",children:"Always the value void"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"noreturn"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"-"})}),(0,t.jsxs)("td",{width:"100%",children:["\tthe type of ",(0,t.jsx)(i.strong,{children:"break"}),", ",(0,t.jsx)(i.strong,{children:"continue"}),", ",(0,t.jsx)(i.strong,{children:"return"}),", ",(0,t.jsx)(i.strong,{children:"unreachable"}),", and ",(0,t.jsx)(i.strong,{children:"while"})," (true) "]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"type"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"-"})}),(0,t.jsx)("td",{width:"100%",children:"the type of types"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"anyerror"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"-"})}),(0,t.jsx)("td",{width:"100%",children:"An error code"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"comptime_int"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"-"})}),(0,t.jsx)("td",{width:"100%",children:"Only allowed for comptime-known values. The type of integer literals."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"comptime_float"})}),(0,t.jsx)("td",{align:"center",children:(0,t.jsx)(i.code,{children:"-"})}),(0,t.jsx)("td",{width:"100%",children:"Only allowed for comptime-known values. The type of integer literals."})]})]})]})]})}function a(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>c,a:()=>s});var t=n(7294);const r={},d=t.createContext(r);function s(e){const i=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(d.Provider,{value:i},e.children)}}}]);