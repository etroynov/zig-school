"use strict";(self.webpackChunkzig_school=self.webpackChunkzig_school||[]).push([[580],{5923:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var s=n(5893),i=n(1151);const o={title:"Conditional Statements (if, else)",sidebar_position:3},a=void 0,r={id:"basics/conditional_statments",title:"Conditional Statements (if, else)",description:"The if(...) instruction only accept bool values:",source:"@site/docs/basics/conditional_statments.mdx",sourceDirName:"basics",slug:"/basics/conditional_statments",permalink:"/zig-school/docs/basics/conditional_statments",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/conditional_statments.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Conditional Statements (if, else)",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Data types",permalink:"/zig-school/docs/basics/data-types"},next:{title:"Arrays",permalink:"/zig-school/docs/basics/arrays"}},l={},c=[{value:"Examples",id:"examples",level:2}];function d(e){const t={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"if(...)"})," instruction only accept ",(0,s.jsx)(t.strong,{children:"bool"})," values:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"true"}),";"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"false"}),";"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-zig",metastring:'title="~/example/main.zig"',children:'const std = @import("std");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n\n    if (true) {\n        try stdout.print("Hello {s}\\n", .{"world"});\n    } else {\n        try stdout.print("It was false :(");\n    }\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="~/example via \u21af v0.11.0 took 2s"',children:"\u279c zig run main.zig\nHello world\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"caution",children:(0,s.jsxs)(t.p,{children:["Zig does not support truthy or falsy values, it means if you will try to use as example ",(0,s.jsx)(t.code,{children:"0"})," in if statment you will get an error."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-zig",metastring:'title="~/example/main.zig"',children:'const std = @import("std");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n\n    if (0) {\n        try stdout.print("Hello {s}\\n", .{"world"});\n    }\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="~/example via \u21af v0.11.0 took 2s"',children:"\u279c zig run main.zig\nmain.zig:6:9: error: expected type 'bool', found 'comptime_int'\n    if (0) {\n        ^\nreferenced by:\n    callMain: /usr/local/Homebrew/Cellar/zig/0.11.0/lib/zig/std/start.zig:574:32\n    initEventLoopAndCallMain: /usr/local/Homebrew/Cellar/zig/0.11.0/lib/zig/std/start.zig:508:34\n    remaining reference traces hidden; use '-freference-trace' to see all reference traces\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>a});var s=n(7294);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);