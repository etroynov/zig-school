"use strict";(self.webpackChunkzig_school=self.webpackChunkzig_school||[]).push([[580],{5923:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=e(5893),i=e(1151);const o={title:"Conditional Statements (if, else)",sidebar_position:2},r=void 0,a={id:"basics/conditional_statments",title:"Conditional Statements (if, else)",description:"The if(...) instruction only accept bool values:",source:"@site/docs/basics/conditional_statments.mdx",sourceDirName:"basics",slug:"/basics/conditional_statments",permalink:"/zig-school/docs/basics/conditional_statments",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/conditional_statments.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Conditional Statements (if, else)",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Variables",permalink:"/zig-school/docs/basics/variables"}},c={},l=[];function d(t){const n={admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"if(...)"})," instruction only accept ",(0,s.jsx)(n.strong,{children:"bool"})," values:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"true"}),";"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"false"}),";"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'const std = @import("std");\n\npub fn main() !void {\n  const stdout = std.io.getStdOut().writer();\n  var statment = true;\n\n  if (statment) {\n    try stdout.print("Hello {s}\\n", .{"world"});\n  } else {\n    try stdout.print("It was false :(");\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Zig does not support truthy or falsy values, it means if you will try to use as example ",(0,s.jsx)(n.code,{children:"0"})," in if statment you will get an error."]})}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'const std = @import("std");\n\npub fn main() !void {\n  const stdout = std.io.getStdOut().writer();\n\n  if (0) {\n    try stdout.print("Hello {s}\\n", .{"world"});\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"example.zig:6:7: error: expected type 'bool', found 'comptime_int'\n  if (0) {\n"})})]})}function u(t={}){const{wrapper:n}={...(0,i.a)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},1151:(t,n,e)=>{e.d(n,{a:()=>r});var s=e(7294);const i={},o=s.createContext(i);function r(t){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}}}]);