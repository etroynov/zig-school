"use strict";(self.webpackChunkzig_school=self.webpackChunkzig_school||[]).push([[860],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),b=n,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||i;return r?a.createElement(m,o(o({ref:t},p),{},{components:r})):a.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},1235:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const i={title:"Variables",sidebar_position:1},o=void 0,l={unversionedId:"basics/variables",id:"basics/variables",title:"Variables",description:"Syntax:",source:"@site/docs/basics/variables.mdx",sourceDirName:"basics",slug:"/basics/variables",permalink:"/zig-school/docs/basics/variables",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/variables.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Variables",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/zig-school/docs/category/basics"},next:{title:"Conditional Statements (if, else)",permalink:"/zig-school/docs/basics/conditional_statments"}},c={},s=[{value:"Keyword",id:"keyword",level:3},{value:"Name",id:"name",level:3},{value:"Type",id:"type",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Syntax:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"<keyword> <name> : <type> = <value>\n")),(0,n.kt)("h3",{id:"keyword"},"Keyword"),(0,n.kt)("p",null,"We have two ways how we can declare the variable:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"var")," - declares a mutable variable, which means that the value can be changed at any time;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"const")," - declares a immutable variable, which means that the value can be set once and cannot be change;")),(0,n.kt)("h3",{id:"name"},"Name"),(0,n.kt)("p",null,"Any name would you like"),(0,n.kt)("h3",{id:"type"},"Type"),(0,n.kt)("p",null,"Type is a type annotation for identifier, and may be omitted if the data type of value can be inferred."))}d.isMDXComponent=!0}}]);