"use strict";(self.webpackChunkzig_school=self.webpackChunkzig_school||[]).push([[860],{3368:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var i=s(5893),t=s(1151);const n={title:"Variables",sidebar_position:1},r=void 0,c={id:"basics/variables",title:"Variables",description:"Syntax:",source:"@site/docs/basics/variables.mdx",sourceDirName:"basics",slug:"/basics/variables",permalink:"/zig-school/docs/basics/variables",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/variables.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Variables",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/zig-school/docs/category/basics"},next:{title:"Conditional Statements (if, else)",permalink:"/zig-school/docs/basics/conditional_statments"}},o={},l=[{value:"Keyword",id:"keyword",level:3},{value:"Name",id:"name",level:3},{value:"Type",id:"type",level:3}];function d(e){const a={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.p,{children:"Syntax:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:"<keyword> <name> : <type> = <value>\n"})}),"\n",(0,i.jsx)(a.h3,{id:"keyword",children:"Keyword"}),"\n",(0,i.jsx)(a.p,{children:"We have two ways how we can declare the variable:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"var"})," - declares a mutable variable, which means that the value can be changed at any time;"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"const"})," - declares a immutable variable, which means that the value can be set once and cannot be change;"]}),"\n"]}),"\n",(0,i.jsx)(a.h3,{id:"name",children:"Name"}),"\n",(0,i.jsx)(a.p,{children:"Any name would you like"}),"\n",(0,i.jsx)(a.h3,{id:"type",children:"Type"}),"\n",(0,i.jsx)(a.p,{children:"Type is a type annotation for identifier, and may be omitted if the data type of value can be inferred."})]})}function h(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,a,s)=>{s.d(a,{a:()=>r});var i=s(7294);const t={},n=i.createContext(t);function r(e){const a=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}}}]);